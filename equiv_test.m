%% Brain-wide inferiority and equivalence tests
% With using functions generated by Gerchen et al. 2021

%% First load the necessary tools
% might change the locations in the future
gCI_path = uigetdir(title='Select the directory where the estimation of effect size g and its confidence interval toolbox is located');
while gCI_path == 0
    gCI_path = uigetdir(title='Select the directory where the estimation of effect size g and its confidence interval toolbox is located');
end
mes_path = uigetdir(title='Select the directory where the measures of effect size toolbox is located');
while mes_path == 0
    mes_path = uigetdir(title='Select the directory where the measures of effect size toolbox is located');
end

addpath(gCI_path) % g-CI toolbox
addpath(mes_path) % MES toolbox

%% Now run the function
% with using es_ci_spm(t_map,con,X,mask_img,confLevel,out_name)
% t_map: string with the name of a SPM results nifti file with t values (usually something like 'spmT_000X.nii'); 
% con: contrast vector used to estimate the t map; 
% X: filtered and pre-whitened SPM design matrix (This should be SPM.xX.xKXs.X in the respective SPM.mat file. Please note that SPM is mean centering covariates); 
% mask_img: string with the name of the SPM mask file for the analysis (usually 'mask.nii'); 
% confLevel: confidence level of the estimated condfidence interval (usually something like .90 or .95); 
% out_name: string with a prefix to add to the name of the results nifti files

%% In a loop, run the function
% but first set the directories
sec_lvl_fld = uigetdir(title='Select the directory where the second level results are located');
while sec_lvl_fld == 0
    sec_lvl_fld = uigetdir(title='Select the highest directory where the second level results are located');
end
main_folds = dir(sec_lvl_fld);
main_folds = strcat({main_folds.folder},filesep,{main_folds.name})';
% loop over them
for q = 1:numel(main_folds)
    if ~contains(main_folds{q}, '/.')
        cont_folds = dir([main_folds{q} filesep 'Contrast*']);
        if ~isempty(cont_folds)
            cont_folds = strcat({cont_folds.folder},filesep,{cont_folds.name})';
        else
            cont_folds = dir(main_folds{q});
            cont_folds = strcat({cont_folds.folder},filesep,{cont_folds.name})';
        end
        % select variables
        inp = inputdlg({'Please enter the file name of the t-maps. For example: "spmT_0001.nii"', ...
            'Please enter the file name of the SPM.mat file. For example: "SPM.mat"', ...
            'Please enter the file name of the mask image. For example: "mask.nii"'})
        t_map_name = inp{1};
        spm_name = inp{2};
        mask_name = inp{3};
        for qq = 1:numel(cont_folds)
            if ~contains(cont_folds{qq}, '/.')
                t_map = [cont_folds{qq} filesep t_map_name];
                con = [1];
                SPM = load([cont_folds{qq} filesep spm_name]);
                X = SPM.SPM.xX.xKXs.X;
                mask_img = [cont_folds{qq} filesep mask_name];
                confLevel = .95;
                out_name = [cont_folds{qq} filesep];
                % es_ci_spm(t_map, con, X, mask_img, confLevel, out_name)
                es_ci_spm_edited(t_map, con, X, mask_img, confLevel, out_name, pool)
            end
        end
    end
end

